# car_price_app.py
import streamlit as st
import pandas as pd
import numpy as np
import pickle
from PIL import Image
import os

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction de Prix de Voitures",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre principal
st.title("üöó Pr√©dicteur de Prix de Voitures")
st.markdown("""
**Utilisez l'intelligence artificielle pour estimer le prix d'une voiture d'occasion**
""")

# Sidebar avec informations
st.sidebar.header("‚ÑπÔ∏è √Ä propos")
st.sidebar.info("""
Cette application utilise un mod√®le de Machine Learning (Random Forest) 
entra√Æn√© pour pr√©dire le prix des voitures d'occasion en fonction de leurs caract√©ristiques.

**Fonctionnalit√©s :**
- Pr√©diction en temps r√©el
- Interface intuitive
- R√©sultats d√©taill√©s
""")

# V√©rification de l'existence du mod√®le
@st.cache_resource
def load_model():
    """Charge le mod√®le entra√Æn√©"""
    try:
        with open('saved_models/random_forest_model.pkl', 'rb') as f:
            model = pickle.load(f)
        
        with open('saved_models/feature_columns.pkl', 'rb') as f:
            feature_columns = pickle.load(f)
        
        return model, feature_columns
    except FileNotFoundError:
        st.error("‚ùå Fichiers du mod√®le non trouv√©s. Assurez-vous que les fichiers .pkl sont dans le dossier 'saved_models/'")
        return None, None

# Chargement du mod√®le
model, feature_columns = load_model()

if model is None:
    st.stop()

# Section de pr√©diction
st.header("üìä Estimation du Prix")

# Cr√©ation des colonnes pour l'interface
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("Caract√©ristiques de la Voiture")
    
    # Formulaire de saisie
    with st.form("car_form"):
        # Marque
        marque = st.selectbox(
            "Marque üè∑Ô∏è",
            ['Toyota', 'Honda', 'Ford', 'BMW', 'Mercedes', 'Audi', 'Hyundai', 'Nissan']
        )
        
        # Ann√©e
        annee = st.slider(
            "Ann√©e de fabrication üìÖ",
            min_value=2000,
            max_value=2023,
            value=2018,
            step=1
        )
        
        # Kilom√©trage
        kilometrage = st.slider(
            "Kilom√©trage üõ£Ô∏è (km)",
            min_value=0,
            max_value=200000,
            value=50000,
            step=1000
        )
        
        # Puissance
        puissance = st.slider(
            "Puissance du moteur ‚ö° (ch)",
            min_value=50,
            max_value=500,
            value=150,
            step=10
        )
        
        # Carburant
        carburant = st.selectbox(
            "Type de carburant ‚õΩ",
            ['Essence', 'Diesel', 'Hybride', '√âlectrique']
        )
        
        # Transmission
        transmission = st.radio(
            "Type de transmission üîß",
            ['Manuelle', 'Automatique']
        )
        
        # Type de voiture
        type_voiture = st.selectbox(
            "Type de carrosserie üöô",
            ['Berline', 'SUV', 'Compacte', 'Break', 'Coup√©']
        )
        
        # Bouton de pr√©diction
        submitted = st.form_submit_button("üéØ Estimer le Prix")

with col2:
    st.subheader("R√©sultats de l'Estimation")
    
    if submitted:
        # Calcul des features d√©riv√©es
        age = 2023 - annee
        km_par_an = kilometrage / max(age, 1)
        
        # Cr√©ation des donn√©es d'entr√©e
        input_data = {
            'Ann√©e': annee,
            'Kilom√©trage': kilometrage,
            'Puissance': puissance,
            '√Çge': age,
            'Km_Par_An': km_par_an
        }
        
        # Ajout des colonnes one-hot encod√©es
        for col in feature_columns:
            if col not in input_data:
                # V√©rifier si cette colonne correspond aux caract√©ristiques s√©lectionn√©es
                if marque in col or carburant in col or transmission in col or type_voiture in col:
                    input_data[col] = 1
                else:
                    input_data[col] = 0
        
        # Cr√©ation du DataFrame
        input_df = pd.DataFrame([input_data])
        input_df = input_df[feature_columns]  # Assurer le bon ordre
        
        try:
            # Pr√©diction
            prix_pred = model.predict(input_df)[0]
            
            # Affichage des r√©sultats
            st.success("‚úÖ Estimation termin√©e avec succ√®s!")
            
            # Carte de r√©sultat
            st.metric(
                label="**Prix estim√©**",
                value=f"{prix_pred:,.0f} ‚Ç¨",
                delta=None
            )
            
            # D√©tails de la pr√©diction
            st.info(f"""
            **D√©tails de l'estimation :**
            - üè∑Ô∏è **Marque** : {marque}
            - üìÖ **Ann√©e** : {annee} (√Çge : {age} ans)
            - üõ£Ô∏è **Kilom√©trage** : {kilometrage:,} km
            - ‚ö° **Puissance** : {puissance} ch
            - ‚õΩ **Carburant** : {carburant}
            - üîß **Transmission** : {transmission}
            - üöô **Type** : {type_voiture}
            """)
            
            # Barre de confiance (simul√©e)
            confidence = min(95, max(70, 100 - (age * 0.5 + kilometrage / 10000)))
            st.progress(int(confidence))
            st.caption(f"Niveau de confiance de l'estimation : {confidence:.0f}%")
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la pr√©diction : {str(e)}")
    
    else:
        # Message d'attente
        st.info("üëÜ Remplissez le formulaire et cliquez sur 'Estimer le Prix' pour obtenir une estimation")
        
        # Exemple de pr√©diction
        st.subheader("üí° Exemple de configuration typique")
        st.code("""
        Toyota - 2018 - 50,000 km - 150 ch
        Essence - Automatique - Berline
        ‚Üí Prix estim√© : ~15,000-20,000 ‚Ç¨
        """)

# Section d'analyse d√©taill√©e
st.header("üìà Analyse et Statistiques")

tab1, tab2, tab3 = st.tabs(["üìä Facteurs d'Influence", "üîç Conseils", "üìã Historique"])

with tab1:
    st.subheader("Facteurs influen√ßant le prix")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("√Çge du v√©hicule", "Impact √©lev√©", delta="-15% par an")
        st.metric("Kilom√©trage", "Impact √©lev√©", delta="-10% par 20,000 km")
    
    with col2:
        st.metric("Marque", "Impact moyen", delta="¬±30% selon marque")
        st.metric("Puissance", "Impact moyen", delta="+5% par 50 ch")
    
    with col3:
        st.metric("Carburant", "Impact moyen", delta="Diesel > Essence")
        st.metric("Transmission", "Impact faible", delta="Auto +5%")

with tab2:
    st.subheader("Conseils pour une bonne estimation")
    
    tips = [
        "‚úÖ V√©rifiez l'√©tat g√©n√©ral du v√©hicule",
        "‚úÖ Consid√©rez l'entretien r√©gulier",
        "‚úÖ Tenez compte des options suppl√©mentaires",
        "‚úÖ Comparez avec des annonces similaires",
        "‚ö†Ô∏è Les accidents r√©duisent significativement la valeur",
        "‚ö†Ô∏è La couleur peut influencer le prix de 5-10%"
    ]
    
    for tip in tips:
        st.write(tip)

with tab3:
    st.subheader("Simulation d'historique de pr√©dictions")
    
    # Exemple de donn√©es historiques
    historique_data = {
        'Date': ['2024-01-15', '2024-01-10', '2024-01-05'],
        'Mod√®le': ['Toyota Corolla', 'BMW X3', 'Ford Focus'],
        'Prix Estim√©': [18500, 32500, 12500],
        'Prix R√©el': [18000, 33000, 12000]
    }
    
    df_hist = pd.DataFrame(historique_data)
    df_hist['Diff√©rence'] = df_hist['Prix Estim√©'] - df_hist['Prix R√©el']
    df_hist['Pr√©cision'] = (1 - abs(df_hist['Diff√©rence']) / df_hist['Prix R√©el']) * 100
    
    st.dataframe(df_hist.style.format({
        'Prix Estim√©': '{:,.0f} ‚Ç¨',
        'Prix R√©el': '{:,.0f} ‚Ç¨', 
        'Diff√©rence': '{:,.0f} ‚Ç¨',
        'Pr√©cision': '{:.1f} %'
    }))

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>üöó <strong>Car Price Predictor</strong> - Powered by Machine Learning</p>
    <p><small>Mod√®le Random Forest entra√Æn√© sur donn√©es synth√©tiques</small></p>
</div>
""", unsafe_allow_html=True)
